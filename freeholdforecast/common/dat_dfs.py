# Functions to load DAT data from different sources

import os
import pandas as pd
import subprocess

from datetime import datetime
from freeholdforecast.common.utils import download_file_from_source, make_directory


def get_df_dat(county: str, landing_directory: str) -> pd.DataFrame:
    """Load and format DAT data for given county

    Args:
        county (str): County identifier
        landing_directory (str): Landing directory path

    Returns:
        pd.DataFrame: Formatted county data
    """

    download_urls = {
        "ohio-butler": "https://www.butlercountyauditor.org/butler_oh_reports/AA407_files.zip",
        "ohio-clermont": "https://www.clermontauditor.org/wp-content/uploads/PublicAccess/Clermont_AA407.zip",
    }

    download_url = download_urls[county]
    download_file_name = download_url.split("/")[-1]
    download_file_path = os.path.join(landing_directory, download_file_name)

    data_directory = os.path.join(landing_directory, download_file_name.replace(".zip", ""))
    make_directory(data_directory)

    download_file_from_source(download_url, download_file_path)

    subprocess.run(
        f"unzip {download_file_path} -d {data_directory}".split(),
        check=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT,
    )

    data_subdirectory = os.path.join(data_directory, os.listdir(data_directory)[0])

    if os.path.isdir(data_subdirectory):
        data_directory = data_subdirectory

    df_parcels = get_df_parcels(data_directory)
    df_asmt = get_df_asmt(data_directory)
    # df_legal = get_df_legal(data_directory)
    df_sales = get_df_sales(data_directory)
    # df_dwell = get_df_dwell(data_directory)

    df = (
        df_parcels.merge(df_asmt, on="Parid", suffixes=("_parcels0", "_asmt"), how="left").merge(
            df_sales, on="Parid", suffixes=("_parcels1", "_sales"), how="left"
        )
        # .merge(df_legal, on="Parid", suffixes=("_parcels2", "_legal"))
        # .merge(df_dwell, on="Parid", suffixes=("_parcels3", "_dwell"))
    )

    rename_columns = {
        "Own1": "Owner Name 1",
        # "Adrno_legal": "House #",
        # "Adrstr_legal": "Street Name",
        # "Adrsuf_legal": "Street Suffix",
        # "Zip1_legal": "Zip Code",
        # "Sfla": "Livable Sqft",
        "Saletype": "DeedType",
        "Saleval": "ValidSale",
        "Price": "Sale Price",
        "Aprbldg": "Building Value",
        "Aprland": "Land Value",
        # "Taxdist": "Tax District",
        "Class_asmt": "Property Class",
    }

    df.rename(columns=rename_columns, inplace=True)
    df["Year of Sale"] = df.last_sale_date.dt.year
    df["Month of Sale"] = df.last_sale_date.dt.month
    df["Day of Sale"] = df.last_sale_date.dt.day

    common_columns = [
        "Parid",
        "Year of Sale",
        "Month of Sale",
        "Day of Sale",
        # "Stories",
        # "Year Built",
        "last_sale_price",
        "last_sale_date",
    ] + list(rename_columns.values())

    df = df[common_columns]

    return df


def get_df_asmt(data_directory: str) -> pd.DataFrame:
    """Load and format assessment data

    Args:
        data_directory (str): Data directory path

    Returns:
        pd.DataFrame: Formatted assessment data
    """

    df_asmt = pd.read_fwf(
        os.path.join(data_directory, "ASMT.DAT"),
        encoding="ISO-8859-1",
        header=None,
        widths=[
            30,
            6,
            5,
            3,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            6,
            9,
            4,
            4,
            4,
            4,
            6,
            40,
            40,
            9,
            9,
            10,
            0,
            9,
            0,
            0,
            0,
            0,
            0,
        ],
        names=[
            "Parid",
            "Jur",
            "Taxyr",
            "Seq",
            "Aprland",
            "Aprbldg",
            "Asmtland",
            "Asmtbldg",
            "Farmland",
            "Forland",
            "Hmsdland",
            "Hmsdbldg",
            "Ppval",
            "Abate",
            "Abateland",
            "Noticval",
            "Specval",
            "Exmpcode",
            "Noticedate",
            "Reascd",
            "Class",
            "Taxclass",
            "Luc",
            "Flag2",
            "Note1",
            "Note2",
            "Deactivat",
            "Wen",
            "Rolltype",
            "Owncode",
            "Effdate",
            "Flg319",
            "Flgerta",
            "Flgappeal",
            "Flglerta",
            "Lucexmp",
        ],
    )

    return df_asmt


def get_df_legal(data_directory: str) -> pd.DataFrame:
    """Load and format legal data

    Args:
        data_directory (str): Data directory path

    Returns:
        pd.DataFrame: Formatted legal data
    """

    df_legal = pd.read_fwf(
        os.path.join(data_directory, "LEGDAT.DAT"),
        encoding="ISO-8859-1",
        header=None,
        widths=[
            30,
            6,
            5,
            4,
            2,
            11,
            6,
            8,
            2,
            30,
            8,
            40,
            5,
            4,
            10,
            10,
            40,
            40,
            5,
            12,
            6,
            10,
            11,
            11,
            11,
            40,
            40,
            15,
            8,
            8,
            1,
            8,
            10,
            60,
            60,
            60,
            40,
            40,
            9,
            9,
            10,
            9,
            5,
            11,
            7,
            7,
            11,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            80,
            80,
            80,
            80,
            80,
        ],
        names=[
            "Parid",
            "Jur",
            "Taxyr",
            "Seq",
            "Adrpre",
            "Adrno",
            "Addradd",
            "Adrsuf",
            "Adrdir",
            "Adrstr",
            "Adrsuf2",
            "Cityname",
            "Zip1",
            "Zip2",
            "Unitdesc",
            "Unitno",
            "Loc2",
            "Rptdashx",
            "Taxdist",
            "Acres",
            "Compct",
            "Convyno",
            "Xcoord",
            "Ycoord",
            "Zcoord",
            "Lotdim",
            "Subdiv",
            "Subdnum",
            "Sublot",
            "Subblck",
            "Subcode",
            "Condbdg",
            "Condunt",
            "Legal1",
            "Legal2",
            "Legal3",
            "Note1",
            "Note2",
            "Deactivat",
            "Wen",
            "Procname",
            "Procdate",
            "Schdist",
            "Sqft",
            "Actfrt",
            "Actdep",
            "Numlot",
            "User1",
            "User2",
            "User3",
            "User4",
            "User5",
            "User6",
            "User7",
            "User8",
            "User9",
            "User10",
            "User11",
            "User12",
            "User13",
            "User14",
            "User15",
            "User16",
            "User17",
            "User18",
            "User19",
            "User20",
            "User21",
            "User22",
            "User23",
            "User24",
            "User25",
        ],
    )

    return df_legal


def get_df_parcels(data_directory: str) -> pd.DataFrame:
    """Load and format parcel data

    Args:
        data_directory (str): Data directory path

    Returns:
        pd.DataFrame: Formatted parcel data
    """

    df_parcels = pd.read_fwf(
        os.path.join(data_directory, "PARDAT.DAT"),
        encoding="ISO-8859-1",
        header=None,
        widths=[
            30,
            6,
            5,
            4,
            6,
            2,
            3,
            2,
            10,
            11,
            10,
            8,
            8,
            2,
            50,
            50,
            20,
            20,
            40,
            5,
            4,
            8,
            4,
            4,
            1,
            4,
            30,
            2,
            9,
            9,
            10,
            16,
            15,
            2,
            2,
            2,
            1,
            1,
            1,
            2,
            1,
            2,
            2,
            2,
            6,
            1,
            21,
            11,
            3,
            11,
            2,
            2,
            40,
            40,
            40,
            40,
            1,
            9,
            2,
            9,
            9,
            9,
            30,
            4,
            4,
            4,
            3,
            1,
            1,
            1,
            1,
            1,
            1,
            9,
            10,
            8,
            10,
            6,
            6,
            6,
            11,
            11,
            20,
            20,
            20,
            20,
        ],
        names=[
            "Parid",
            "Jur",
            "Taxyr",
            "Seq",
            "Mappre",
            "Mapsuf",
            "Rtepre",
            "Rtesuf",
            "Adrpre",
            "Adrno",
            "Adradd",
            "Adrsuf",
            "Adrsuf2",
            "Adrdir",
            "Adrstr",
            "Cityname",
            "Unitdesc",
            "Unitno",
            "Loc2",
            "Zip1",
            "Zip2",
            "Nbhd",
            "Class",
            "Luc",
            "Lucmult",
            "Livunit",
            "Tieback",
            "Tiebackcd",
            "Tielandpct",
            "Tiebldgpct",
            "Landisc",
            "Calcacres",
            "Acres",
            "Street1",
            "Street2",
            "Traffic",
            "Topo1",
            "Topo2",
            "Topo3",
            "Location",
            "Fronting",
            "Util1",
            "Util2",
            "Util3",
            "Ofcard",
            "Partial",
            "Bldgros_d",
            "Bldgros_v",
            "Mscbld_n",
            "Mscbld_v",
            "Notecd1",
            "Notecd2",
            "Note1",
            "Note2",
            "Note3",
            "Note4",
            "Rectype",
            "Pctown",
            "Chgrsn",
            "Salekey",
            "Deactivat",
            "Wen",
            "Alt_ID",
            "Muni",
            "Block",
            "Spot",
            "Juris",
            "Parkprox",
            "Parkquanit",
            "Parktype",
            "Restrict1",
            "Restrict2",
            "Restrict3",
            "Zoning",
            "Prefactmscbld",
            "Adjfact",
            "Fldref",
            "Zfar",
            "Pfar",
            "Afar",
            "Pfarsf",
            "Afarsf",
            "User1",
            "User2",
            "User3",
            "User4",
        ],
    )

    return df_parcels


def get_df_sales(data_directory: str) -> pd.DataFrame:
    """Load and format sales data

    Args:
        data_directory (str): Data directory path

    Returns:
        pd.DataFrame: Formatted sales data
    """

    df_sales = pd.read_fwf(
        os.path.join(data_directory, "SALES.DAT"),
        encoding="ISO-8859-1",
        header=None,
        widths=[
            30,
            6,
            20,
            5,
            4,
            5,
            4,
            9,
            8,
            8,
            205,
            205,
            9,
            11,
            1,
            1,
            14,
            8,
            12,
            15,
            3,
            9,
            11,
            2,
            80,
            80,
            80,
            80,
            80,
            80,
            9,
            9,
            3,
            3,
            9,
            1,
            5,
            11,
            9,
            20,
            20,
            20,
            20,
            20,
            10,
        ],
        names=[
            "Parid",
            "Jur",
            "Transno",
            "Oldyr",
            "Oldseq",
            "Newyr",
            "Newseq",
            "Salekey",
            "Book",
            "Page",
            "Oldown",
            "Own1",
            "Saledt",
            "Price",
            "Source",
            "Saletype",
            "Instruno",
            "Instrtyp",
            "Imageno",
            "Adjprice",
            "Adjreas",
            "Recorddt",
            "Aprtot",
            "Saleval",
            "Note1",
            "Note2",
            "Note3",
            "Note4",
            "Note5",
            "Note6",
            "Transdt",
            "Wen",
            "Mktvalid",
            "Steb",
            "Asmt",
            "Stflag",
            "Nopar",
            "Adjamt",
            "Asr",
            "Linkno",
            "User1",
            "User2",
            "User3",
            "User4",
            "Who",
        ],
    )

    df_sales = df_sales.loc[df_sales.Price > 0]

    def update_invalid_years(date):
        if date.year > datetime.now().year:
            date = date.replace(year=(date.year - 100))

        return date

    df_sales["last_sale_price"] = pd.to_numeric(df_sales.Price)
    df_sales["last_sale_date"] = pd.to_datetime(df_sales.Saledt, format="%d-%b-%y").apply(update_invalid_years)
    df_sales.sort_values(by="last_sale_date", ascending=True, ignore_index=True, inplace=True)

    df_sales.Saletype.replace(pd.NA, 0, inplace=True)
    df_sales.Saletype.replace("I", 1, inplace=True)

    return df_sales


def get_df_dwell(data_directory: str) -> pd.DataFrame:
    """Load and format dwelling data

    Args:
        data_directory (str): Data directory path

    Returns:
        pd.DataFrame: Formatted dwelling data
    """

    butler_widths = [
        30,
        6,
        5,
        5,
        4,
        5,
        1,
        2,
        5,
        5,
        3,
        3,
        2,
        3,
        2,
        2,
        3,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        2,
        1,
        1,
        10,
        1,
        8,
        7,
        7,
        7,
        7,
        3,
        18,
        26,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        3,
        3,
        4,
        7,
        4,
        2,
        4,
        11,
        7,
        7,
        8,
        9,
        9,
        9,
        7,
        9,
        11,
        11,
        9,
        5,
        9,
        4,
        9,
        9,
        9,
        9,
        9,
        9,
        7,
        11,
        11,
        11,
        8,
        11,
        9,
        7,
        7,
        10,
        9,
        9,
        4,
        7,
        8,
        11,
        9,
        40,
        40,
        9,
        9,
        5,
        4,
        8,
        11,
        2,
        2,
        11,
        1,
        1,
        1,
        6,
        7,
        11,
        6,
        2,
        6,
        2,
        6,
        2,
        4,
        2,
        10,
    ]
    clermont_widths = [
        30,
        6,
        5,
        5,
        4,
        4,
        1,
        3,
        5,
        5,
        3,
        3,
        2,
        3,
        2,
        2,
        3,
        1,
        1,
        1,
        1,
        1,
        1,
        4,
        4,
        2,
        1,
        1,
        10,
        2,
        8,
        7,
        7,
        7,
        7,
        3,
        18,
        26,
        2,
        2,
        2,
        2,
        2,
        3,
        2,
        3,
        3,
        4,
        7,
        4,
        2,
        4,
        11,
        7,
        7,
        8,
        9,
        9,
        9,
        7,
        9,
        11,
        11,
        9,
        5,
        9,
        4,
        9,
        9,
        9,
        9,
        9,
        9,
        7,
        11,
        11,
        11,
        8,
        11,
        9,
        7,
        7,
        10,
        9,
        9,
        4,
        7,
        8,
        11,
        9,
        40,
        40,
        9,
        9,
        5,
        4,
        8,
        11,
        2,
        2,
        11,
        1,
        1,
        1,
        6,
        7,
        11,
        6,
        2,
        6,
        2,
        6,
        2,
        4,
        2,
        10,
    ]

    df_sales = pd.read_fwf(
        os.path.join(data_directory, "DWELL.DAT"),
        encoding="ISO-8859-1",
        header=None,
        widths=butler_widths if "butler" in data_directory else clermont_widths,
        names=[
            "Parid",
            "Jur",
            "Card",
            "Taxyr",
            "Seq",
            "Stories",
            "Extwall",
            "Style",
            "Yrblt",
            "Yrremod",
            "Rmtot",
            "Rmbed",
            "Rmfam",
            "Fixbath",
            "Fixhalf",
            "Fixaddl",
            "Fixtot",
            "Remkit",
            "Rembath",
            "Bsmt",
            "Heat",
            "Heatsys",
            "Fuel",
            "Grade",
            "Class",
            "Cddesc",
            "Attic",
            "Intext",
            "Unitno",
            "Rectype",
            "Flr1area",
            "Mastrimarea",
            "Unfinarea",
            "Recromarea",
            "Finbsmtarea",
            "CondoVw",
            "Cndcmplx",
            "Cline",
            "Wbfp_o",
            "Wbfp_s",
            "Wbfp_pf",
            "Bsmtcar",
            "Msc1des",
            "Msc1num",
            "Msc2des",
            "Msc2num",
            "Condolvl",
            "Condotyp",
            "Mgfa",
            "Cdpct",
            "Cdu",
            "Depr",
            "Addnval",
            "Addnarea",
            "Adjarea",
            "Areafact",
            "Atticval",
            "Bgarval",
            "Bsmtval",
            "Cnstfact",
            "Cnstval",
            "Cndbaseval",
            "Cndadjval",
            "Finbsmtval",
            "Grdfact",
            "Heatval",
            "Mktadj",
            "Msc1val",
            "Msc2val",
            "Plumval",
            "Ufeatval",
            "Ufeatarea",
            "Wbfpval",
            "Exmppct",
            "Exmpval",
            "Rcnld",
            "Adjrcnld",
            "Adjfact",
            "Rcnval",
            "Recval",
            "Sfla",
            "Shfact",
            "Subtval",
            "Trimval",
            "Unfinval",
            "Grmunits",
            "Grmrent",
            "Adjgrmfact",
            "Resgrmval",
            "Salekey",
            "Note1",
            "Note2",
            "Deactivate",
            "Wen",
            "Effyr",
            "Pctcomplete",
            "Userfact",
            "Useramt",
            "CDU",
            "Mktrsn",
            "Basercnld",
            "Degrem",
            "Cond",
            "Valmeth",
            "Resmod",
            "Modover",
            "Areasum",
            "Obsdep",
            "Obsrsn",
            "Fundep",
            "Funrsn",
            "Ecndep",
            "Ecnrsn",
            "Bldguse",
            "Chgrsn",
            "Deprt",
        ],
    )

    df_sales["Stories"] = pd.to_numeric(df_sales.Stories)
    df_sales["Year Built"] = pd.to_numeric(df_sales.Yrblt)

    return df_sales[["Parid", "Stories", "Year Built", "Sfla"]]
